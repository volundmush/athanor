from django.dispatch import Signal
from collections import defaultdict

CHARACTERS_ONLINE = set()

CMDSETS_UNLOGGEDIN_EXTRA = []
CMDSETS_SESSION_EXTRA = []
CMDSETS_CHARACTER_EXTRA = []
CMDSETS_ACCOUNT_EXTRA = []

CMD_MODULES_UNLOGGEDIN = []
CMD_MODULES_SESSION = []
CMD_MODULES_CHARACTER = []
CMD_MODULES_ACCOUNT = []

PLUGINS = dict()

OBJECT_ACCESS_FUNCTIONS = defaultdict(list)
SCRIPT_ACCESS_FUNCTIONS = defaultdict(list)
ACCOUNT_ACCESS_FUNCTIONS = defaultdict(list)
CHANNEL_ACCESS_FUNCTIONS = defaultdict(list)

EVENTS: dict[str, Signal] = defaultdict(Signal)

OBJECT_OBJECT_DEFAULT_LOCKS = defaultdict(list)
OBJECT_CHARACTER_DEFAULT_LOCKS = defaultdict(list)
OBJECT_EXIT_DEFAULT_LOCKS = defaultdict(list)
OBJECT_ROOM_DEFAULT_LOCKS = defaultdict(list)

HANDLERS = defaultdict(dict)


def _apply_settings(settings):
    settings.MULTISESSION_MODE = 3
    settings.AUTO_CREATE_CHARACTER_WITH_ACCOUNT = False
    settings.AUTO_PUPPET_ON_LOGIN = False
    settings.MAX_NR_SIMULTANEOUS_PUPPETS = 10
    settings.MAX_NR_CHARACTERS = 10

    settings.AT_SERVER_STARTSTOP_MODULE = (
        [settings.AT_SERVER_STARTSTOP_MODULE]
        if isinstance(settings.AT_SERVER_STARTSTOP_MODULE, str)
        else settings.AT_SERVER_STARTSTOP_MODULE
    )
    settings.AT_SERVER_STARTSTOP_MODULE.append("athanor.startup_hooks")

    settings.ACTION_TEMPLATES = {
        "say": '$You() $conj(say), "{text}"',
        "whisper": '$You() $conj(whisper) to $you(target), "{text}"',
        "pose": "$You() {text}",
        "emit": "{text}",
        "semipose": "$You(){text}",
        "login": "$You() $conj(have) entered the game.",
        "logout": "$You() $conj(have) left the game.",
    }

    settings.BASE_CHARACTER_TYPECLASS = (
        "athanor.typeclasses.characters.AthanorPlayerCharacter"
    )
    settings.BASE_NPC_TYPECLASS = (
        "athanor.typeclasses.characters.AthanorNonPlayerCharacter"
    )
    settings.BASE_ITEM_TYPECLASS = "athanor.typeclasses.items.AthanorItem"
    settings.BASE_OBJECT_TYPECLASS = settings.BASE_ITEM_TYPECLASS
    settings.BASE_ROOM_TYPECLASS = "athanor.typeclasses.rooms.AthanorRoom"
    settings.BASE_EXIT_TYPECLASS = "athanor.typeclasses.exits.AthanorExit"

    settings.BASE_SCRIPT_TYPECLASS = "athanor.typeclasses.scripts.AthanorScript"

    settings.BASE_ACCOUNT_TYPECLASS = "athanor.typeclasses.accounts.AthanorAccount"

    settings.BASE_CHANNEL_TYPECLASS = "athanor.typeclasses.channels.AthanorChannel"

    settings.CMDSET_UNLOGGEDIN = "athanor.cmdsets.UnloggedinCmdSet"
    settings.CMDSET_SESSION = "athanor.cmdsets.SessionCmdSet"
    settings.CMDSET_CHARACTER = "athanor.cmdsets.CharacterCmdSet"
    settings.CMDSET_ACCOUNT = "athanor.cmdsets.AccountCmdSet"

    settings.CMDSETS_UNLOGGEDIN_EXTRA = []
    settings.CMDSETS_SESSION_EXTRA = []
    settings.CMDSETS_CHARACTER_EXTRA = []
    settings.CMDSETS_ACCOUNT_EXTRA = []

    settings.CMD_MODULES_UNLOGGEDIN = []
    settings.CMD_MODULES_SESSION = []
    settings.CMD_MODULES_CHARACTER = []
    settings.CMD_MODULES_ACCOUNT = []

    settings.AUTOMAP_ENABLED = False

    settings.OPTION_CLASS_MODULES.append("athanor.options")
    if isinstance(settings.LOCK_FUNC_MODULES, tuple):
        settings.LOCK_FUNC_MODULES = list(settings.LOCK_FUNC_MODULES)

    settings.OPTIONS_ACCOUNT_DEFAULT["screenreader"] = (
        "Minimize fancy formatting.",
        "Boolean",
        False,
    )

    settings.OPTIONS_ACCOUNT_DEFAULT["border_color"] = (
        "Headers, footers, table borders, etc.",
        "Color",
        "M",
    )

    settings.OPTIONS_ACCOUNT_DEFAULT["header_text_color"] = (
        "Text inside Header lines.",
        "Color",
        "w",
    )

    settings.OPTIONS_ACCOUNT_DEFAULT["client_width"] = (
        "Preferred client width.",
        "PositiveInteger",
        settings.CLIENT_DEFAULT_WIDTH,
    )

    settings.OPTIONS_ACCOUNT_DEFAULT["rich_border_style"] = (
        "Border box colors generated by Rich",
        "Style",
        "magenta",
    )
    settings.OPTIONS_ACCOUNT_DEFAULT["rich_header_style"] = (
        "Headers generated by Rich.",
        "Style",
        "bold",
    )

    settings.ALERTS_CHANNEL = "MudInfo"
    settings.ROOT_URLCONF = "athanor.urls"

    settings.URL_INCLUDES = [
        ("", "web.website.urls"),
        ("webclient/", "web.webclient.urls"),
        ("admin/", "web.admin.urls"),
        ("athanor/", "athanor.website.urls"),
    ]

    settings.SERVER_SESSION_CLASS = "athanor.serversession.AthanorServerSession"

    settings.TELNET_PROTOCOL_CLASS = "athanor.portalsessions.PlainTelnet"
    settings.SSL_PROTOCOL_CLASS = "athanor.portalsessions.SecureTelnet"
    settings.SSH_PROTOCOL_CLASS = "athanor.portalsessions.SSHProtocol"
    settings.WEBSOCKET_PROTOCOL_CLASS = "athanor.portalsessions.WebSocket"

    settings.DJANGO_ADMIN_APP_ORDER = [
        "accounts",
        "objects",
        "scripts",
        "comms",
        "help",
        "typeclasses",
        "server",
        "sites",
        "flatpages",
        "auth",
    ]

    settings.DJANGO_ADMIN_APP_EXCLUDE = ["account"]

    settings.HELP_MORE_ENABLED = False

    settings.OBJECT_ACCESS_FUNCTIONS = defaultdict(list)
    settings.SCRIPT_ACCESS_FUNCTIONS = defaultdict(list)
    settings.ACCOUNT_ACCESS_FUNCTIONS = defaultdict(list)
    settings.CHANNEL_ACCESS_FUNCTIONS = defaultdict(list)

    settings.ACCESS_FUNCTIONS_LIST = ["OBJECT", "SCRIPT", "ACCOUNT", "CHANNEL"]

    settings.OBJECT_OBJECT_DEFAULT_LOCKS = defaultdict(list)
    settings.OBJECT_CHARACTER_DEFAULT_LOCKS = defaultdict(list)
    settings.OBJECT_EXIT_DEFAULT_LOCKS = defaultdict(list)
    settings.OBJECT_ROOM_DEFAULT_LOCKS = defaultdict(list)

    object_default_locks = {
        "control": "perm(Developer)",
        "examine": "perm(Builder)",
        "edit": "perm(Admin)",
        "delete": "perm(Admin)",
        "get": "all()",
        "drop": "holds()",
        "call": "true()",
        "tell": "perm(Admin)",
        "puppet": "pperm(Developer)",
        "teleport": "true()",
        "teleport_here": "true()",
    }

    character_default_locks = object_default_locks.copy()
    character_default_locks.update(
        {
            "get": "false()",
            "call": "false()",
            "teleport": "perm(Admin)",
            "teleport_here": "perm(Admin)",
        }
    )

    room_default_locks = object_default_locks.copy()
    room_default_locks.update(
        {
            "get": "false()",
            "puppet": "false()",
            "teleport": "false()",
            "teleport_here": "true()",
        }
    )

    exit_default_locks = object_default_locks.copy()
    exit_default_locks.update(
        {
            "traverse": "all()",
            "get": "false()",
            "puppet": "false()",
            "teleport": "false()",
            "teleport_here": "false()",
        }
    )

    for locks, target in [
        (object_default_locks, settings.OBJECT_OBJECT_DEFAULT_LOCKS),
        (character_default_locks, settings.OBJECT_CHARACTER_DEFAULT_LOCKS),
        (room_default_locks, settings.OBJECT_ROOM_DEFAULT_LOCKS),
        (exit_default_locks, settings.OBJECT_EXIT_DEFAULT_LOCKS),
    ]:
        for k, v in locks.items():
            target[k].append(v)

    settings.DEFAULT_LOCKS_LIST = [
        "OBJECT_OBJECT",
        "OBJECT_CHARACTER",
        "OBJECT_EXIT",
        "OBJECT_ROOM",
    ]

    # if True, characters who go offline will be stowed in Nowhere and brought back when they next login.
    # if False, they will remain in the rooms, but simply are offline. It's best to use room formatters to
    # hide them?
    settings.OFFLINE_CHARACTERS_VOID_STORAGE = True

    settings.ATHANOR_HANDLERS = defaultdict(dict)


def init(settings, plugins=None):
    _apply_settings(settings)

    if plugins is None:
        plugins = list()

    from importlib import import_module

    call_order = list()
    for plugin in plugins:
        module = import_module(plugin)

        if hasattr(module, "init"):
            PLUGINS[plugin] = module
            call_order.append(module)

    for p in call_order:
        p.init(settings, PLUGINS)

    for p in call_order:
        if callable((post_init := getattr(p, "post_init", None))):
            post_init(settings, PLUGINS)


def finalize(settings):
    for p in PLUGINS.values():
        if callable((finalize := getattr(p, "finalize", None))):
            finalize(settings, PLUGINS)


def register_access_functions(access_types: list[str]):
    from evennia.utils import class_from_module
    from django.conf import settings
    import athanor

    for t in access_types:
        access_funcs = f"{t}_ACCESS_FUNCTIONS"
        access_funcs_from = getattr(settings, access_funcs)
        access_funcs_to = getattr(athanor, access_funcs)

        for access_type, func_list in access_funcs_from.items():
            for func_path in func_list:
                access_funcs_to[access_type].append(class_from_module(func_path))


def register_lock_functions(types: list[str]):
    from evennia.utils import class_from_module
    from django.conf import settings
    import athanor

    for t in types:
        default_locks = f"{t}_DEFAULT_LOCKS"
        default_locks_from = getattr(settings, default_locks)
        default_locks_to = getattr(athanor, default_locks)

        for access_type, func_list in default_locks_from.items():
            for func_path in func_list:
                if "(" in func_path:
                    # this is a literal lockstring. Add it directly.
                    default_locks_to[access_type].append(func_path)
                else:
                    default_locks_to[access_type].append(class_from_module(func_path))
