# Generated by Django 4.1.11 on 2023-11-25 10:00

import athanor.utils
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("objects", "0013_defaultobject_alter_objectdb_id_defaultcharacter_and_more"),
        ("accounts", "0012_defaultaccount_alter_accountdb_id_account_bot_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccountPlaytime",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="playtime",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("total_playtime", models.PositiveIntegerField(default=0)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("last_logout", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CharacterPlaytime",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="+",
                        serialize=False,
                        to="objects.objectdb",
                    ),
                ),
                ("total_playtime", models.PositiveIntegerField(default=0)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("last_logout", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Host",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip", models.GenericIPAddressField(unique=True)),
                ("hostname", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PlayviewDB",
            fields=[
                (
                    "db_key",
                    models.CharField(db_index=True, max_length=255, verbose_name="key"),
                ),
                (
                    "db_typeclass_path",
                    models.CharField(
                        db_index=True,
                        help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.",
                        max_length=255,
                        null=True,
                        verbose_name="typeclass",
                    ),
                ),
                (
                    "db_date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="creation date"
                    ),
                ),
                (
                    "db_lock_storage",
                    models.TextField(
                        blank=True,
                        help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.",
                        verbose_name="locks",
                    ),
                ),
                (
                    "id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="playview",
                        serialize=False,
                        to="objects.objectdb",
                    ),
                ),
                (
                    "db_sessid",
                    models.CharField(
                        help_text="csv list of session ids of connected Account, if any.",
                        max_length=32,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                        verbose_name="session id",
                    ),
                ),
                (
                    "db_last_active",
                    models.DateTimeField(
                        blank=True, default=athanor.utils.utcnow, null=True
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "db_attributes",
                    models.ManyToManyField(
                        help_text="attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).",
                        to="typeclasses.attribute",
                    ),
                ),
                (
                    "db_puppet",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="puppeting_playview",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "db_tags",
                    models.ManyToManyField(
                        help_text="tags on this object. Tags are simple string markers to identify, group and alias objects.",
                        to="typeclasses.tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Evennia Database Object",
                "ordering": ["-db_date_created", "id", "db_typeclass_path", "db_key"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LoginRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_success", models.BooleanField(default=False)),
                ("reason", models.CharField(max_length=50, null=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="login_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "host",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="records",
                        to="athanor.host",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AccountOwner",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="account_owner",
                        serialize=False,
                        to="objects.objectdb",
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_characters",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CharacterAccountPlaytime",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_playtime", models.PositiveIntegerField(default=0)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("last_logout", models.DateTimeField(blank=True, null=True)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="characters_playtime",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "playtime",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="per_account",
                        to="athanor.characterplaytime",
                    ),
                ),
            ],
            options={
                "unique_together": {("playtime", "account")},
            },
        ),
    ]
